#+TITLE:  Emacs Super Cheetsheet
#+AUTHOR: Comcx
#+DATE:   <2019-10-02 ä¸‰>

:IDEA:
Hello, I am reading emacs official guide
Here I record things I encountered.

Well, This is very fundamental and basic though...
:END:

* Basics

** Introduction
*GNU Emacs*
*** Advancement
- Controling of processes
- Self-documenting
- Customization
- Extensible(with /emacs lisp/)
- Powerful org-mode

** Getting started
*** Entering Emacs
Just type
#+BEGIN_SRC 
emacs
#+END_SRC
and here we are!

#+BEGIN_SRC 
C-h t
Emacs Tutorial
#+END_SRC

If we do not want to display the startup screen(which I think is ugly:(),
set the variable
#+BEGIN_SRC 
inhibit-startup-screen
#+END_SRC
to =nil=
then instead, Emacs will display a buffer named **scratch**
which can be used to evaluate elisp codes.

Moreover, we can also force emacs to display certain file at startup by setting the variable
#+BEGIN_SRC 
initial-buffer-choice
#+END_SRC
to a file path

*** Exiting Emacs
- C-x C-c : Kill Emacs
| Command                | Function                                      |
|------------------------+-----------------------------------------------|
| confirm-kill-processes | ask for confirmation for killing subprocesses |
| confirm-kill-emacs     |                                               |
- C-z 
#+BEGIN_SRC 
(if (on text terminal) 
  (suspend Emacs) 
  (minimize selected frame))
#+END_SRC

** Screen organization
*** The *Frame*: a graphic window or terminal screen occupied by emacs.
Contains several *Regions*
**** Menu bar
#+BEGIN_SRC 
F10
to open menu(menu-bar-open)
#+END_SRC

**** Tool bar
**** Window(text area): display /buffer/
at least one selected at any time
**** Mode line
Describe current buffer
#+BEGIN_SRC 
Format: 
cs:ch-fr buf      pos line   (major minor)
#+END_SRC
where
- cs => charactor set
  + *-* => no special char set
  + *=* => no conversion
  + U => Unicode

- ch
  + *--* => same content as file in disk
  + ** => buffer is modified
  + *%** => buffer is modified for read-only file
  + *%%* => otherwise

- -
  + *-* => normal
  + *@* => default-directory is on a remote machine

- fr: file name(terminal only)

- buf: buffer name

**** Echo area
- for echoing commands and errors
  #+BEGIN_SRC 
  C-x =
  Display a message describing the char at point, its position and its current column
  #+END_SRC
  the message are saved in a special buffer named **Message**,
  the variable
  #+BEGIN_SRC 
  message-log-max
  #+END_SRC
  limit **Message** buffer to a certain number of lines

- To display the *minibuffer*
  a special window to input some commands
  can always get out of *minibuffer* by typing in
  #+BEGIN_SRC 
  C-g
  #+END_SRC

***** Minibuffer
- Completion
- History
  | M-p                      | M-n                  |
  | UP                       | DOWN                 |
  | previous-history-element | next-history-element |

** Editing elements
*** *Charactors*
#+BEGIN_SRC 
Control => Ctrl
Alt     => Meta(default)
#+END_SRC
- Shortcuts:
  + C-x : Control-x
  + M-x : Meta-x

Moreover, you can just type [ESC] before charactors to envoke Meta, for example,
#+BEGIN_SRC 
ESC a   === M-a
ESC C-a === C-M-a
#+END_SRC

/note:/ Emacs may be blocked by window manager, be careful:)

**** Charactor Set

*** *Point*
: a basic conception of cursor
*** *Mark*
- *Setting mark* (Very useful:)
  | C-SPC   | Set mark at point and activate                 |
  | C-@     | same as above                                  |
  | C-x C-x | C-SPC then exchange last mark with point       |
  | M-@     | (mark-word)mark end of next word               |
  | M-h     | point => begining of para and mark end of para |
  | C-x C-p | point => begining of page and mark end of page |
  | C-x h   | point => begining of buff and mark end of buff |

- *Mark Ring*  
  Every buffer has a /mark ring/.
  | C-SPC C-SPC | set mark without activating it |
  | C-u C-SPC   | Jump to previous mark          |

*** *Region*
- Operations on region
  | C-w        | Kill it                          |
  | M-w        | Copy it                          |
  | C-x C-[lu] | Convert case:(some how disabled) |
  | C-u C-/    | Undo within                      |
  | C-x TAB    | Indent                           |
  | C-M-\      | same as above                    |
  
*** *Ring* 
**** Mark Ring
**** Kill Ring
*** *Regex*

*** *Buffer*
- Creating and Selection
  | C-x b     | (switch-to-buffer)select or create |
  | C-x 4 b   | switch-to-buffer-other-window      |
  | C-x 5 b   | switch-to-buffer-other-frame       |
  | C-x LEFT  | previous-buffer                    |
  | C-x RIGHT | next-buffer                        |
- Listing
  =C-x C-b=
- Killing
  | C-x k                 | kill-buffer |
  | M-x kill-some-buffers |             |

*** *Window*
- Spliting
  | C-x 2 | split-window-below |
  | C-x 3 | split-window-right |
- Selection
  =C-x o=
- Resizing
  | C-x 0 | delete-window                       |
  | C-x 1 | delete-other-windows                |
  | C-x ^ | enlarge-window                      |
  | C-x } | enlarge-window-horizontally         |
  | C-x { | shrink-window-horizontally          |
  | C-x - | shrink-window-if-larger-than-buffer |
  | C-x + | balance-window                      |

*** *Frame*
| C-x 5 0 | delete-frame                         |
| C-z     | suspend-frame                        |
| C-x 5 o | Select another frame                 |
| C-x 5 1 | Delete all frams except selected one |

** Keys and Commands
*** Keys
- Complete key
- Prefix key
  | C-c     | C-h   | C-x   |
  | C-x RET | C-x @ | C-x a |
  | C-x n   | C-x r | C-x v |
  | C-x 4   | C-x 5 | C-x 6 |
  | ESC     | M-g   | M-o   |

**** Key Macros
Abstraction of Composition of keys!
- Definition
  | C-x ( | start definition |
  | F3    | same as above    |
  | C-x ) | end definition   |
  | F4    | same as above    |

- Execute
  | C-x e  | Excute last macro                   |
  | C-u F3 | Re-execute last one and append keys |

*** Commands
**** Editing
***** Inserting Text

- Overview
  | Key   | Function             |
  |-------+----------------------|
  | RET   | newline              |
  | C-o   | open-line            |
  | DEL   | delete-backward-char |
  | C-q   | quoted-insert        |
  | C-x 8 |                      |

- Usage of =C-q=
  1) insert special charactor(like [DEL])
  2) insert with octal number
    #+BEGIN_SRC 
    C-q 1 0 1 B => insert 'AB'
    #+END_SRC

***** Changing location of Point
- Keys for arrow operations
  |     | C-p |     |    |
  | C-b |     | C-f | => |
  |     | C-n |     |    |
  
  -----
  |               | previous-line |              |    
  | backward-char |               | forward-char |    
  |               | next-line     |              |    

  -----
  |      | UP   |       |    |
  | LEFT |      | RIGHT | => |
  |      | DOWN |       |    |

  -----
  |           | previous-line |            |    
  | left-char |               | right-char |    
  |           | next-line     |            |    

- Inline operations
  | C-a                   | C-e              |
  | Home                  | End              |
  | move-begining-of-line | move-end-of-line |

  -----
  | M-b           | M-f          |
  | backward-word | forward-word |
  |               |              |
  | C-LEFT        | C-RIGHT      |
  | M-LEFT        | M-RIGHT      |
  | left-word     | right-word   |

- Reposition line
  #+BEGIN_SRC 
  M-r
  move-to-window-line-top-bottom
  --without moving the text on the screen, move point to leftmost of the center line
  #+END_SRC  

- Global jump
  | M-<                | M->           |
  | begining-of-buffer | end-of-buffer |
  
  -----
  | C-v               | M-v                 |
  | PageDown          | PageUp              |
  | next              | prior               |
  | scroll-up-command | scroll-down-command |

  #+BEGIN_SRC 
  M-g c
  \n => go to position n
  #+END_SRC
   
  | M-g M-g   | M-g TAB        |
  | M-g g     |                |
  | goto-line | move-to-column |

  #+BEGIN_SRC 
  C-x C-n         C-u C-x C-n
  #+END_SRC

***** Erasing Text

| DEL                  | Delete              |
| BACKSPACE            |                     |
| delete-backward-char | delete-forward-char |

-----
| C-d         | M-d       |
| delete-char | kill-word |
// all forward

| Key         | Function                           |
|-------------+------------------------------------|
| C-k         | kill-line                          |
| M-DEL       | backward-kill-word                 |
| M-BACKSPACE | same                               |
| C-x C-o     | delete-blank-lines                 |
| M-^         | (delete indentation)Join two lines |
|             |                                    |

***** Yanking
| C-y | Yank last kill into point                                  |
| M-y | Replace text with last killed(point to previous kill ring) |
(M-y is magic!:)

***** Undoing
#+BEGIN_SRC 
C-/
C-x u
C-_
#+END_SRC

**** Files
- Most useful
  #+BEGIN_SRC 
  C-x C-f        C-x C-s
  find-file      save-buffer
  #+END_SRC
- Visiting
  | C-x C-f | find-file              |
  | C-x C-r | find-file-read-only    |
  | C-x C-v | find-alternate-file    |
  | C-x 4 f | find-file-other-window |
  | C-x 5 f | find-file-other-frame  |
- Saving
  | C-x C-s | save-buffer                                           |
  | C-x s   | save-some-buffers                                     |
  | C-x C-w | write-file(save current buffer with a specified name) |
- Reverting
  #+BEGIN_SRC 
  M-x revert-buffer
  #+END_SRC
  (need to be careful, this may lose a lot work:)

**** Help
#+BEGIN_SRC 
C-h k
describe-key
\key => describe key

C-h f
describe-function
\func => describe functio
#+END_SRC

**** Information
| Key             | Command                       |
|-----------------+-------------------------------|
| M-x what-line   | what-line                     |
| M-=             | count-words-region            |
| M-x count-words | count-words(of whole buffer:) |
| C-x =           | what-cursor-position          |

**** Meta
***** Numeric Arguments
#+BEGIN_SRC 
M-<number> <other keys>
e.g. M-5 C-f: forward 5 chars
#+END_SRC

***** Repeating Commands
#+BEGIN_SRC 
C-x z
#+END_SRC

**** Display Controlling
***** Scrolling
- Vertical
  | C-v               | M-v                 |
  | PageDown          | PageUp              |
  | next              | prior               |
  | scroll-up-command | scroll-down-command |

- Horizontal(somehow disabled by default!)
  | C-x < | scroll-left (disabled!!) |
  | C-x > | scroll-right(disabled!!) |

***** Recentering
  | Key   | Function                                |
  |-------+-----------------------------------------|
  | C-l   | recenter-top-bottom                     |
  | C-M-l | reposition-window(scroll heuristically) |

***** Narrowing
:(Disabled by default!)

***** Modes
- View mode(read-only)

- Follow mode
#+BEGIN_SRC 
C-x 3
M-x follow-mode
#+END_SRC

***** Faces
- Text
  To see current definitions
  #+BEGIN_SRC 
  M-x list-faces-display
  #+END_SRC
- Color
  To view color names
  #+BEGIN_SRC 
  M-x list-color-display
  #+END_SRC
- Standard faces
  Here I list only some of them:
  | default     | 
  | bold        | 
  | italic      | 
  | bold-italic | 
  | underline   | 
  | shadow      | 
  | highlight   | 
  More faces visit GNU Emacs official guide

***** Scale
| C-x C-+ | Zoom in  |
| C-x C-- | Zoom out |

***** Cursor

**** Searching and Replacement
- Searching
  | C-s   | isearch-forward         |
  | C-r   | isearch-backward        |
  | C-M-s | isearch-forward-regexp  |
  | C-M-r | isearch-backward-regexp |

- Replacement
  | M-%   | query-replace        |
  | C-M-% | query-replace-regexp |
  - Batch replacement
    #+BEGIN_SRC 
    M-x replace-string
    #+END_SRC

** Modes
*** Major Modes
- Switch
  #+BEGIN_SRC 
  M-x <name>-mode
  #+END_SRC

*** Minor Modes
- Hooks
- Listing
  #+BEGIN_SRC 
  C-h m
  M-x describe-mode
  #+END_SRC

* Emacs Lisp

** Types
*** Basic Types
**** Function
**** Number
numberp
***** Integer
integerp
- Range
#+BEGIN_SRC 
most-positive-fixnum
most-negative-fixnum
#+END_SRC

***** Floating
floatp
- Useful functions
  | truncate | round towards zero |
  | floor    | round downwards    |
  | ceiling  | round upwards      |
  | round    | round to nearest   |
- Mathematical
  | sin      |   |
  | cos      |   |
  | tan      |   |
  | asin     |   |
  | acos     |   |
  | atan     |   |
  | exp      |   |
  | log      |   |
  | sqrt     |   |
  | float-e  |   |
  | float-pi |   |
  | random   |   |

**** Charactor
**** Symbol
**** Sequence
:BASIC:
| sequencep       | predicte |
| length          | length   |
| elt             | nth      |
| copy-sequence   |          |
| reverse         |          |
| sort            |          |
| seq-drop        |          |
| seq-take        |          |
| seq-map         |          |
| seq-filter      |          |
| seq-remove      |          |
| seq-reduce      |          |
| seq-find        |          |
| seq-contains    |          |
| seq-concatenate |          |
| seq-max         |          |
| seq-min         |          |
:END:
***** List
refer to /SICP/
| null      | (null '())             |
| car       | (car x)                |
| cdr       | (cdr x)                |
| nth       | (nth 2 x)              |
| last      | (last x)               |
| cons      | (cons 1 '(2))          |
| list      | (list 1 2 3)           |
| make-list | (make-list 3 'pigs)    |
| append    | (append '(a b) '(c d)) |

***** Array
| arrayp | predicate |
| aref   | nth       |
| aset   | set nth   |

****** Vector
****** String
- Basics
  | make-string  | (make-string 5 ?x)           |
  | string       | (string ?a ?b ?c)            |
  | substring    | (substring "abcdefg" 0 3)    |
  | concat       | (concat "abc" "-def")        |
  | split-string | (split-string " two words ") |
  | string=      | (string "abc" "abc")         |
- Conversions
  | number-to-string | (number-to-string 256)   |
  | string-to-number | (string-to-number "256") |
- Formatting
  | format     |   |
  | downcase   |   |
  | upcase     |   |
  | capitalize |   |

**** Macro

*** Editing Types
**** Buffer
**** Marker
**** Window
**** Frame
**** Terminal
**** Process
**** Stream
**** Font

** Control Structures
| (progn a b c ...) |   |
| (if p a b)        |   |
| (when p x)        |   |
| (unless p x)      |   |
| (cond clause)     |   |
| (pcase clause)    |   |

* Awesome Org-mode
  
** Outline
*** View
- Commands
  | TAB     | ,-> FOLDED -> CHILDREN -> SUBTREE --. |
  |         | '-----------------------------------' |
  | S-TAB   | Global cycle                          |
  | C-c TAB | \n => show children down to level n   |

- Setting
#+BEGIN_SRC org 
#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: showeverything
#+END_SRC

*** Motion
Remember use =C-c= as a prefix
| C-c C-n | Next heading                     | org-next-visible-heading     |
| C-c C-p | Previous heading                 | org-previous-visible-heading |
| C-c C-f | Next heading same level          | org-forward-same-level       |
| C-c C-b | Previous heading same level      | org-backward-same-level      |
| C-c C-u | Backward to higher level heading | outline-up-heading           |

*** Editing
Use =Meta= Key!
 | M-RET   | Insert a new item                                      | org-meta-return                    |
 | C-RET   | Insert a new heading at the end of the current subtree | org-insert-heading-respect-content |
 | M-LEFT  | Promote current heading by one level                   | org-do-promote                     |
 | M-RIGHT | Demote current heading by one level                    | org-do-demote                      |
 | M-UP    | swap with previous subtree of same level               | org-move-subtree-up                |
 | M-DOWN  | swap with next subtree of same level                   | org-move-subtree-down              |

*** Sparsing
| C-c / | org-sparse-tree |

*** Plain Lists
**** Unordered
#+BEGIN_SRC 
- dash :: df
+ plus
#+END_SRC

**** Ordered
#+BEGIN_SRC 
1. dot
1) para
#+END_SRC

** Elements
Remember, to insert, use =C-c C-x= or =C-c= prefix
*** Drawer
#+BEGIN_SRC 
C-c C-x d
org-insert-drawer  
#+END_SRC

*** Block
*** Footnote
  - Commands
    #+BEGIN_SRC 
    C-c C-x f
    The footnote action command. When the cursor is on a footnote reference, jump to the definition. 
    When it is at a definition, jump to the (first) reference. Otherwise, create a new footnote. 
    When this command is called with a prefix argument, a menu of additional options including renumbering is offered.
    #+END_SRC

    #+BEGIN_SRC 
    C-c C-c                         C-c '
    Jump to definition              Edit definition in a new window which can be closed with C-c ' again
    #+END_SRC
  - Formats
    + [fn:name]
    + [fn::definition]
    + [fn:name:definition]

*** Table
**** Creation and conversion
   C-c | -- a little confused with this command...

**** Field motion
| C-c C-c | Re-align the table and donâ€™t move to another field       |
| TAB     | Re-align the table, move to the next field               |
| S-TAB   | Re-align, move to previous field                         |
| RET     | Re-align, move to next row                               |
| M-a     | Move to beginning of the current field or previous field |
| M-e     | Move to end of the current field or next field           |

**** Row and Column motion
| M-LEFT    | Move cloumn left             |
| M-RIGHT   | Move column right            |
| M-UP      | Move row up                  |
| M-DOWN    | Move row down                |
| M-S-LEFT  | Kill column                  |
| M-S-RIGHT | Insert column                |
| M-S-UP    | Kill row                     |
| M-S-DOWN  | Insert row                   |
| C-c -     | Insert horizontal line below |
|-----------+------------------------------|

**** Region
**** Calculation
**** Size
#+BEGIN_SRC 
|---+------------------------------|               |---+--------|
|   |                              |               |   | <6>    |
| 1 | one                          |               | 1 | one    |
| 2 | two                          |     ----\     | 2 | two    |
| 3 | This is a long chunk of text |     ----/     | 3 | This=> |
| 4 | four                         |               | 4 | four   |
|---+------------------------------|               |---+--------|
#+END_SRC
**** Group
**** Reference
| C-c ? | To find out what the coordinates of a field are |
- General format:
  #+BEGIN_SRC 
  @row$column

  E.g.
  | 1 | 2 | 3 |
  | 4 | 5 | 9 |
  #+TBLFM: $3=vsum($1..$2)
  #+END_SRC

- Functions

*** Link
**** Format
#+BEGIN_SRC 
[[link][description]]
To edit, use C-c C-l
To open, use C-c C-o
#+END_SRC

**** Internal
#+BEGIN_SRC 
The great brother:
[[target]] =======C-c C-o======> <<target>>
#+END_SRC

**** External
***** Formats
| http://www.astro.uva.nl/~dominik            | on the web                     |
| doi:10.1000/182                             | DOI for an electronic resource |
| file:/home/dominik/images/jupiter.jpg       | file, absolute path            |
| /home/dominik/images/jupiter.jpg            | same as above                  |
| file:papers/last.pdf                        | file, relative path            |
| ./papers/last.pdf                           | same as above                  |
| file:/ssh:myself@some.where:papers/last.pdf | file, path on remote machine   |
| /ssh:myself@some.where:papers/last.pdf      | same as above                  |
| file:sometextfile::NNN                      | file, jump to line number      |
| file:projects.org                           | another Org file               |
| file:projects.org::some words               | text search in Org file3       |

*** TODO
**** Basic Commands
| C-c C-t          | Tag Selection |
| S-RIGHT / S-LEFT | Tag rotation  |
                   |               |
**** Set Keywords

*** Tag
- Insertion
  #+BEGIN_SRC 
  C-c C-q
  or
  C-c C-c
  #+END_SRC

- Format
  #+BEGIN_SRC 
  :TAG:
  #+END_SRC

** Modes
** Syntax
use =M-: (org-element-parse-buffer) RET=






