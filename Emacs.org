#+TITLE:  Emacs study note
#+AUTHOR: Comcx
#+DATE:   <2019-10-02 ä¸‰>

:IDEA:
Hello, I am reading emacs official guide
Here I record things I encountered
:END:

* Basic operation

** Introduction
*GNU Emacs*
*** Advancement
- Controling of processes
- Self-documenting
- Customization
- Extensible(with /emacs lisp/)
- Powerful org-mode

** Getting started
*** Entering Emacs
Just type
#+BEGIN_SRC 
emacs
#+END_SRC
and here we are!

#+BEGIN_SRC 
C-h t
Emacs Tutorial
#+END_SRC

If we do not want to display the startup screen(which I think is ugly:(),
set the variable
#+BEGIN_SRC 
inhibit-startup-screen
#+END_SRC
to =nil=
then instead, Emacs will display a buffer named **scratch**
which can be used to evaluate elisp codes.

Moreover, we can also force emacs to display certain file at startup by setting the variable
#+BEGIN_SRC 
initial-buffer-choice
#+END_SRC
to a file path

*** Exiting Emacs
- C-x C-c : Kill Emacs
| command                | function                                      |
| confirm-kill-processes | ask for confirmation for killing subprocesses |
| confirm-kill-emacs     |                                               |
- C-z 
#+BEGIN_SRC 
(if (on text terminal) 
  (suspend Emacs) 
  (minimize selected frame))
#+END_SRC

** Screen organization
*** The *Frame*: a graphic window or terminal screen occupied by emacs.
Contains several *Regions*
**** Menu bar
#+BEGIN_SRC 
F10
to open menu(menu-bar-open)
#+END_SRC

**** Tool bar
**** Window(text area): display /buffer/
at least one selected at any time
**** Mode line
Describe current buffer
#+BEGIN_SRC 
Format: 
cs:ch-fr buf      pos line   (major minor)
#+END_SRC
where
- cs => charactor set
  - *-* => no special char set
  - *=* => no conversion

- ch
  - *--* => same content as file in disk
  - **   => buffer is modified
  - *%** => buffer is modified for read-only file
  - *%%* => otherwise

- -
  - *-* => normal
  - *@* => default-directory is on a remote machine

- fr: file name(terminal only)

- buf: buffer name

**** Echo area
- for echoing commands and errors
  #+BEGIN_SRC 
  C-x =
  Display a message describing the char at point, its position and its current column
  #+END_SRC
  the message are saved in a special buffer named **Message**,
  the variable
  #+BEGIN_SRC 
  message-log-max
  #+END_SRC
  limit **Message** buffer to a certain number of lines

- To display the *minibuffer*
  a special window to input some commands
  can always get out of *minibuffer* by typing in
  #+BEGIN_SRC 
  C-g
  #+END_SRC

***** Minibuffer
- Completion
- History
  | M-p                      | M-n                  |
  | UP                       | DOWN                 |
  | previous-history-element | next-history-element |

** Editing elements
*** *Point*: a basic conception of cursor
*** *Mark*
- *Setting mark* (Very useful:)
  | C-SPC   | Set mark at point and activate                 |
  | C-@     | same as above                                  |
  | C-x C-x | C-SPC then exchange last mark with point       |
  | M-@     | (mark-word)mark end of next word               |
  | M-h     | point => begining of para and mark end of para |
  | C-x C-p | point => begining of page and mark end of page |
  | C-x h   | point => begining of buff and mark end of buff |

- *Mark Ring*  
  Every buffer has a /mark ring/.
  | C-SPC C-SPC | set mark without activating it |
  | C-u         | C-SPC => Jump to previous mark |

*** *Region*
- Operations on region
  | C-w        | Kill it                          |
  | M-w        | Copy it                          |
  | C-x C-[lu] | Convert case:(some how disabled) |
  | C-u C-/    | Undo within                      |
  | C-x TAB    | Indent                           |
  | C-M-\      | same as above                    |
  
*** *Ring* 
**** Mark Ring
**** Kill Ring
 
** Charactors, Keys and Commands
*** Charactors
#+BEGIN_SRC 
Control => Ctrl
Alt     => Meta(default)
#+END_SRC
- Shortcuts:
  - C-x : Control-x
  - M-x : Meta-x

Moreover, you can just type [ESC] before charactors to envoke Meta, for example,
#+BEGIN_SRC 
ESC a   === M-a
ESC C-a === C-M-a
#+END_SRC

/note:/ Emacs may be blocked by window manager, be careful:)

*** Keys
- Complete key
- Prefix key
  | C-c     | C-h   | C-x   |
  | C-x RET | C-x @ | C-x a |
  | C-x n   | C-x r | C-x v |
  | C-x 4   | C-x 5 | C-x 6 |
  | ESC     | M-g   | M-o   |

*** Commands
**** Inserting Text

- Overview
  | Key   | Function             |
  |-------+----------------------|
  | RET   | newline              |
  | C-o   | open-line            |
  | DEL   | delete-backward-char |
  | C-q   | quoted-insert        |
  | C-x 8 |                      |

- Usage of =C-q=
  1) insert special charactor(like [DEL])
  2) insert with octal number
    #+BEGIN_SRC 
    C-q 1 0 1 B => insert 'AB'
    #+END_SRC

**** Changing location of Point
- Keys for arrow operations
  |     | C-p |     |    |
  | C-b |     | C-f | => |
  |     | C-n |     |    |
  
  -----
  |               | previous-line |              |    
  | backward-char |               | forward-char |    
  |               | next-line     |              |    

  -----
  |      | UP   |       |    |
  | LEFT |      | RIGHT | => |
  |      | DOWN |       |    |

  -----
  |           | previous-line |            |    
  | left-char |               | right-char |    
  |           | next-line     |            |    

- Inline operations
  | C-a                   | C-e              |
  | Home                  | End              |
  | move-begining-of-line | move-end-of-line |

  -----
  | M-b           | M-f          |
  | backward-word | forward-word |
  |               |              |
  | C-LEFT        | C-RIGHT      |
  | M-LEFT        | M-RIGHT      |
  | left-word     | right-word   |

- Reposition line
  #+BEGIN_SRC 
  M-r
  move-to-window-line-top-bottom
  --without moving the text on the screen, move point to leftmost of the center line
  #+END_SRC  

- Global jump
  | M-<                | M->           |
  | begining-of-buffer | end-of-buffer |
  
  -----
  | C-v               | M-v                 |
  | PageDown          | PageUp              |
  | next              | prior               |
  | scroll-up-command | scroll-down-command |

  #+BEGIN_SRC 
  M-g c
  \n => go to position n
  #+END_SRC
   
  | M-g M-g   | M-g TAB        |
  | M-g g     |                |
  | goto-line | move-to-column |

  #+BEGIN_SRC 
  C-x C-n         C-u C-x C-n
  #+END_SRC

**** Erasing Text

| DEL                  | Delete              |
| BACKSPACE            |                     |
| delete-backward-char | delete-forward-char |

-----
| C-d         | M-d       |
| delete-char | kill-word |
// all forward

| Key         | Function                           |
|-------------+------------------------------------|
| C-k         | kill-line                          |
| M-DEL       | backward-kill-word                 |
| M-BACKSPACE | same                               |
| C-x C-o     | delete-blank-lines                 |
| M-^         | (delete indentation)Join two lines |
|             |                                    |

**** Yanking
| C-y | Yank last kill into point     |
| M-y | Replace text with last killed |

**** Undoing
#+BEGIN_SRC 
C-/
C-x u
C-_
#+END_SRC

**** Files
#+BEGIN_SRC 
C-x C-f        C-x C-s
find-file      save-buffer
#+END_SRC

**** Help
#+BEGIN_SRC 
C-h k
describe-key
\key => describe key
#+END_SRC

**** Information
| Key             | Command                       |
|-----------------+-------------------------------|
| M-x what-line   | what-line                     |
| M-=             | count-words-region            |
| M-x count-words | count-words(of whole buffer:) |
| C-x =           | what-cursor-position          |

**** Numeric Arguments
#+BEGIN_SRC 
M-<number> <other keys>
e.g. M-5 C-f: forward 5 chars
#+END_SRC

**** Repeating Commands
#+BEGIN_SRC 
C-x z
#+END_SRC

* Emacs Lisp


* Awesome org-mode








