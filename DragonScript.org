#+TITLE:  Dragon Script
#+AUTHOR: Comcx
#+DATE:   <2019-04-09 äºŒ>


* Add Two Numbers


** Description

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)

Output: 7 -> 0 -> 8

Explanation: 342 + 465 = 807.


** Solution

#+BEGIN_SRC C++

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
      
      ListNode *a = l1, 
               *b = l2;
      ListNode ans = ListNode(-1),
               *cur = &ans;
      int cre = 0;
      do {
        
        int sum = (a ? a->val : 0) + (b ? b->val : 0) + cre;
        int bit = sum % 10;
        cre = sum / 10;
        
        cur->next = new ListNode(bit);
        
        cur = cur->next;
        a = a ? a->next : NULL;
        b = b ? b->next : NULL;
        
      } while(a || b);
      
      if(cre == 1) cur->next = new ListNode(1);
      return ans.next;
    }
};


#+END_SRC


