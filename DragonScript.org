#+TITLE:  Dragon Script
#+AUTHOR: Comcx
#+DATE:   <2019-04-09 äºŒ>

:IDEA:

 Well I suddenly contrived the idea that I should find some basic(atom)
 problems which can be used or composed in various kinds of problems,
 which can save some time.
 
 Therefore, I'm planning to reconstruct the structure of this script.
 not only just records of my solutions of katas, but all simple ideas
 novelty :)

:END:


* Weapons [0/2]

** TODO Books
*** Concrete Mathematics
*** CLRS

** NEXT Lazy Robot Project
:README:
Trying to build most algorithms from functional implemention to
imperative ones...

:END:

Well, firstly, some techniques...
*** TODO Dynamic Programming
**** DONE What's DP's really about ?
***** DONE Version 1: A _memorization_ perspect
If we are in a lazy programming environment, it would be apparently easy to implement.
  
! Using /Haskell/ and /Scala/
****** DONE Fibonacci numbers 
By the way, this makes me recall the website: [[https://www.willamette.edu/~fruehr/haskell/evolution.html][Haskell.evolution]] 
#+BEGIN_SRC haskell

import Data.Array

-- Naive recursion
fib0 0 = 0
fib0 1 = 1
fib0 n = fib (n-1) + fib (n-2)

-- Tailrec
fib1 n = f n 0 1 where
  f n a b = if n == 0 then a else f (n-1) b (a+b)

-- CPS(seems the worst one...)
fib2 n = f n $ \x -> x where
  f n g = case n of
    0 -> g 0
    1 -> g 1
    _ -> f (n-1) $ \a -> f (n-2) $ \b -> g (a+b)

-- Lazy memorization with automatic GC(seems the best one?)
fib3 n = fibs !! n
  where fibs = 0 : 1 : zipWith (+) fibs (drop 1 fibs)

-- Yet another memorization
fib4 max = go max where 
  go 0 = 0
  go 1 = 1
  go n = fibs ! (n - 1) + fibs ! (n - 2)
  fibs = listArray (0, max) [go x | x <- [0..max]]

#+END_SRC
fib1, fib3 and fib4 are more efficient than others.
In practice, it's easier to come up with the method of fib1 or fib4.

well, good news! I found a kata where none of my fibs can pass through...
Finally I found the solution below(now we have fib5 :):
#+BEGIN_SRC haskell

module Fibonacci where

import Data.List
import Data.Bits

fib' :: Int -> Integer
fib' n = snd . foldl' fib'' (1, 0) . dropWhile not $ testedBits where
  testedBits = [testBit n k | k <- let s = bitSize n in [s - 1,s - 2..0]]
  fib'' (f, g) p
    | p         = (f * (f + 2 * g), ss)
    | otherwise = (ss, g * (2 * f - g))
    where ss = f * f + g * g

fib5 :: Integer -> Integer
fib5 n
  | n < 0 = -(-1)^(-n) * fib (-n)
  | otherwise = fib' $ fromInteger n
#+END_SRC

****** DONE Translating into memorization version(dynamic programming)
In fact, if we can come up with a reasonable recursion method, then we can directly
translate it to versions like fib4. Here's the template:
#+BEGIN_SRC haskell

-- Naive recursion version
f n = g $ f $ h n
-- ||
-- \/
-- Memorization version
f' n = rc ! n where
  rc = listArray bounds [f n | n <- bound]
#+END_SRC
Now, what about fib1, how can we find a tail recursion version of any recursions?

***** DONE Version 2: Tail recursion calculus
When I began programming in FP style before, I in a sense regard tail recursion as
a fp-version loop in imperative languages. Therefore, if we want to optimize a naive
recursion by tail recursion, we are going to translate naive recursions into loops without
stack.

Let's have a look at the fib1 version again.
#+BEGIN_SRC haskell

-- tailrec
fib1 n = f n 0 1 where
  f n a b = if n == 0 then a else f (n-1) b (a+b)
#+END_SRC
we can try to find the form in this way:
#+BEGIN_SRC haskell

-- Step 1 ==> A first attempt is to add fib(n + 1) to both sides of the equation:
fib (n + 1) + fib (n + 2) = fib n + 2 * fib (n + 1)

-- Step 2 ==> The two sides of the equation look much more alike, 
-- but there is still an essential difference, which is the coefficient of the second term of each side. 
-- On the left side of the equation, it is 1 and, on the right, it is 2. To remedy this, we can introduce a variable b:
fib (n + 1) + b * fib (n + 2) = b * fib n + (b + 1) * fib (n + 1)

-- Step3 ==> We notice that the coefficients of the first term are not the same (1 on the left and b on the right), 
-- so we introduce a variable a:
a * fib (n + 1) + b * fib (n + 2) = b * fib n + (a + b) * fib (n + 1)

-- Step 4 ==> Now the two sides have the same form (call it F), which we can define as:
F a b n = a * fib n + b * fib (n + 1)

-- Then we have
F a b (n + 1) = F b (a + b) n

-- and
F a b 0 = a * fib 0 + b * fib 1 = a + b

-- Step 5 ==> Finally, by definition of F:
fib n = F 1 0 n
#+END_SRC
Can we find a more general procedure to produce a tailrec version of recursions?
If not, what kind of recursions can be translated in this way?

In the first place, I came up with the *CPS* style, which is like /fib2/ .
If the CPS style is more efficient, we can easily translate any recursion to its CPS style.
However, sadly, CPS style is the worst version os fib* and the CPS style is just another way of
calculation context accumulation.

Therefore, if the recursion is tree-like, we can not simplely use CPS to create out tailrec version.

**** NEXT Implementing DP in imperative strict languages
! Using C++ or Python

In general, if we have already found the naive recursive method, 
then all we have to do is to solve the dependency problem.

***** NEXT Patterns of dependency
- *Some notations*

  In dynamic programming, we have many states of the function, we denote these states as
  vectors in n-dimension space. For instance, fib0 has 1-dimension vectors such as fib0 0, fib0 1, etc;
  fib1 has 2-dimension vectors such as fib1 0 1, fib1 1 1, etc.

****** TODO Simple dependency by naive order
The most simple dependency pattern is orderred by number orders.
for example, if a < b(or a > b), then a is denpendent with b.
These patterns can be tranlated into DP without much thinking.



* Dragons [13/17]

** DONE Longest Substring Without Repeating Characters                 :EASY:

*** Description

Given a string, find the length of the longest substring without repeating characters.
#+BEGIN_SRC
Example 1:
Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 

Example 2:
Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
#+END_SRC

*** Analysis
  Let's generalize this problem a little bit:

**** Settings
   - Say our indices in the array comes from 0.
   - Our solver 
       =f : Seq a ==> Index -> (List a -> a -> Bool) -> (List a, Length)=
       which gives the answer on the range index of [0, n]
**** Environment
   s : List a
**** Pseudocode
#+BEGIN_SRC haskell
f 0 p = if p [] (s 0) then ([s 0], 1) else ([], 0)
f n p = if p a (s n) then (a ++ [s n], len + 1) else ([s n], 0)
where
  (a, len) = f (n - 1) p

-- Here we can make
p a x = not $ elem a x

main = f (length s - 1) p
#+END_SRC

Ok, we can see now we must tranverse the entire array, which is O(n),
therefore, the complexity is depend on the complexity of function *p*.

I we use hash, we can have function p with time complexity O(1)
and finally we have O(n) algorithm.

If we do not use hash, any better way?

*** Solution

#+BEGIN_SRC c++
//O(nlgn)?? or better?
//Failed to find a better way to check if current elem already existed
//use array[256]:(

//I tried several several times on Leet but failed:(! Switching back to CodeWars
class Solution {
public:

int lengthOfLongestSubstring(string s) {
        
  int ans = 1;
  int acc[256];
  int p = 0;
  
  memset(acc, 0, 256);
  for(int i = 0; i < s.size(); ++i) {
    
    if(acc[s[i]] == 1) {

      while(s[p] != s[i]) {
      
        acc[s[p]] = 0;
    	++p;
      }
      p += 1;
      ans = (ans < i-p+1) ? i-p+1 : ans;
    }
    else ans = (ans < i-p+1) ? i-p+1 : ans;
    acc[s[i]] = 1;
  }
  return ans;
}

};



#+END_SRC

** DONE Find The Parity Outlier                                        :EASY:

*** Description
You are given an array (which will have a length of at least 3, 
but could be very large) containing integers. 
The array is either entirely comprised of odd integers or 
entirely comprised of even integers except for a single integer N. 
Write a method that takes the array as an argument and returns this "outlier" N.
#+BEGIN_SRC 

Examples
[2, 4, 0, 100, 4, 11, 2602, 36]
Should return: 11 (the only odd number)

[160, 3, 1719, 19, 11, 13, -21]
Should return: 160 (the only even number)
#+END_SRC

*** Solution

#+BEGIN_SRC C++
int FindOutlier(std::vector<int> arr)
{
    int even;
    int odd;
  
    int evenCount = 0;
    int oddCount = 0;
  
    for (auto a : arr)
        a % 2 == 0 ? (evenCount++, even = a) : (oddCount++, odd = a);
  
    return evenCount < oddCount ? even : odd;
}


#+END_SRC

** NEXT Cycle detection                                                :MEDI:

*** Extant
*** Floyd algorithm

*** Bernt's algorithm(The Teleporting Turtle)

*** Experiment

** DONE Factorial decomposition                                        :MEDI:

*** Description
The aim of the kata is to decompose n! (factorial n) into its prime factors.
#+BEGIN_SRC 
Examples:

n = 12; decomp(12) -> "2^10 * 3^5 * 5^2 * 7 * 11"
since 12! is divisible by 2 ten times, by 3 five times, by 5 two times and by 7 and 11 only once.

n = 22; decomp(22) -> "2^19 * 3^9 * 5^4 * 7^3 * 11^2 * 13 * 17 * 19"

n = 25; decomp(25) -> 2^22 * 3^10 * 5^6 * 7^3 * 11^2 * 13 * 17 * 19 * 23
Prime numbers should be in increasing order. When the exponent of a prime is 1 don't put the exponent.

#+END_SRC
*Notes*

- the function is decomp(n) and should return the decomposition of n! into 
  its prime factors in increasing order of the primes, as a string.
- factorial can be a very big number (4000! has 12674 digits, n will go from 300 to 4000).

*** Solution
#+BEGIN_SRC c++
#include <string>
#include <map>
#include <sstream>

using std::vector;
using std::string;
using std::map;
string decomp(int n) {
  
  string ans("");
  std::stringstream ss;
  map<int, int> rc {};
  for(int i(2); i <= n; ++i) {
    
    int cur(i);
    for(auto &p : rc) {
      while(cur % p.first == 0) {
        cur /= p.first;
        p.second++;
      }
    }
    if(cur > 1) rc[cur] = 1;
  }
  for(auto p : rc) {
    
    (p.second == 1) ?
      ss << p.first : 
      ss << p.first << "^" << p.second;
    ss << " * ";
  }
  ans = ss.str();
  
  return ans.substr(0, ans.length() - 3);
}
#+END_SRC

** DONE Counting Change Combinations                                   :MEDI:

*** Description
Write a function that counts how many different ways you can make change for an amount of money, 
given an array of coin denominations. 
For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2:
=1+1+1+1, 1+1+2, 2+2.=

The order of coins does not matter:
=1+1+2 == 2+1+1=

Also, assume that you have an infinite amount of coins.

Your function should take an amount to change and an array of unique denominations for the coins:

#+BEGIN_SRC c++
count_change(4,  {1,2})   // => 3
count_change(10, {5,2,3}) // => 4
count_change(11, {5,7})   // => 0
#+END_SRC

*** Analysis

#+BEGIN_SRC haskell

-- m := money
-- i := index of coins
count m i = count (m - (coins i)) i + count m (i + 1)
count 0 _ = 1
#+END_SRC
found a bug here, you can't export to html if u have codes on the 1st line of haskell code block
**** Complexity
   underwork

*** Solution

#+BEGIN_SRC c++

#include <vector>
#include <algorithm>

using std::vector;
using large = unsigned long long;
large
dp(unsigned money, const vector<unsigned int>& coins) {

  large ans(0);
  large **rc = new large*[money + 1];
  for (int i = 0; i < money+1; ++i) rc[i] = new large[coins.size()];
  
  for(int i(0); i <= money; ++i)
    rc[i][coins.size()-1] = i % coins[coins.size()-1] == 0 ? 1 : 0;
  for(int j(0); j < coins.size(); ++j)
    rc[0][j] = 1;
  
  for(int i(1); i <= money; ++i)
    for(int j(coins.size()-2); j >= 0; --j) {
      
      if(i >= coins[j]) {
        rc[i][j] = rc[i - coins[j]][j]
                 + rc[i][j + 1];
      }
      else rc[i][j] = 0;
    }
  
  return rc[money][0];
}
//count m i = count (m-coins[i]) i + count m (i+1)
//count 0 _ = 1

large 
countChange(const unsigned int money, const vector<unsigned int>& coins) {

  large ans(0);
  
  vector<unsigned int> pac(coins);
  std::sort(pac.begin(), pac.end());

  ans = dp(money, pac);
  
  return ans;
}

#+END_SRC

#+BEGIN_SRC c++
using large = unsigned long long;
large 
countChange(unsigned money, const std::vector<unsigned>& coins) {
  std::vector<large> ks(money + 1);
  ks[0] = 1;
  for (unsigned i : coins)
    for (unsigned j = i; j <= money; j++)
      ks[j] += ks[j - i];
  return ks[money];
}
#+END_SRC
Somehow a little confused with this solution)

** DONE ZigZag Conversion                                              :MEDI:

*** Description
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
#+BEGIN_SRC
P   A   H   N
A P L S I I G
Y   I   R
#+END_SRC
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);

Example 1:
#+BEGIN_SRC
Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
#+END_SRC

Example 2:
#+BEGIN_SRC
Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"

Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I
#+END_SRC

*** Solution

#+BEGIN_SRC c++

string Solution::convert(string s, int numRows) {
  
  string ans("");
  int cur(0);
  if(numRows == 1) return s;
  for(int i(1); i <= numRows; ++i) {
    
    int j(cur), invert(numRows - i);
    ans += string(1, s[cur]);
    while((cur = cur + invert * 2) < s.size()) {
      
      ans += invert ? string(1, s[cur]) : "";
      invert = (numRows - invert - 1);
      if(cur + invert * 2 < s.size()) {
        ans += invert ? 
          (cur += invert * 2, string(1, s[cur])) : "";
      } else break;
      invert = (numRows - invert - 1);
    }
    cur = i;
  }
  
  return ans;
}

#+END_SRC

** DONE Longest Palindromic Substring                             :HARD:BOND:

*** Description
Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:
#+BEGIN_SRC
Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
#+END_SRC

Example 2:
#+BEGIN_SRC
Input: "cbbd"
Output: "bb"
#+END_SRC

*** Analysis

Let's first find the way to get the longest length
#+BEGIN_SRC haskell

-- s := the string(data)
-- i := left index
-- j := right index
f i j | i == j     = 1
      | j - i == 2 = if s[i] == s[j] then 2 else 0
      | otherwise  = if s[i] == s[j] && inner then inner + 2 else 0
where inner = f (i + 1) (j - 1)
#+END_SRC

*** Solution

**** Dynamic Programming
#+BEGIN_SRC c++

//DP method
string longestPalindrome(string s) {
  
  int rc[1000][1000], start(0), end(0), cur(0);
  for(int i(s.size()-1); i >= 0; --i) {
    for(int j(i); j < s.size(); ++j) {
      
      if(i == j) rc[i][j] = 1;
      else if(j - i == 1) rc[i][j] = s[i] == s[j] ? 2 : 0;
      else rc[i][j] = 
        rc[i+1][j-1] && s[i] == s[j] ? rc[i+1][j-1] + 2 : 0;
      cur = rc[i][j] > cur ?
        start = i, end = j, rc[i][j] : cur;
    }
  }
  return s.substr(start, end-start+1);
}

#+END_SRC
- Summary
  Focus on how answer is constructed by answers.
  Unfortunately, still O(n^2)

**** Manacher's Algorithm
underwork

** DONE Maximum Subarray                                          :MEDI:BOND:

*** Description
Given an integer array nums, 
find the contiguous subarray (containing at least one number) 
which has the largest sum and return its sum.

Example:
#+BEGIN_SRC
Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:
#+END_SRC
If you have figured out the O(n) solution, 
try coding another solution using the divide and conquer approach, 
which is more subtle.

*** Solution
#+BEGIN_SRC C++

int Solution::maxSubArray(vector<int>& nums) {
  
  int ans(INT_MIN), sum(0);
  for (int n : nums)
    sum = max(sum + n, n),
    ans = max(ans, sum);
  
  return ans;
}

#+END_SRC

** DONE Climbing Stairs                                                :EASY:

*** Description
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:
#+BEGIN_SRC
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
#+END_SRC
Example 2:
#+BEGIN_SRC
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
#+END_SRC

*** Analysis

#+BEGIN_SRC haskell

f 0 = 1
f n = if n < 0 then 0 else f (n-1) + f (n-2)
#+END_SRC
Obviously, it's a fibonacci seq!

*** Solution
#+BEGIN_SRC c++

int Solution::climbStairs(int n) {
  
  int a(0), b(1), x(0);
  for(int i(2); i <= n; ++i)
    x = a + b,
    a = b, b = x;
  
  return a + b;
}

#+END_SRC

** DONE Regular Expression Matching                                    :HARD:

*** Description
Given an input string (s) and a pattern (p), 
implement regular expression matching with support for '.' and '*'.

- '.' Matches any single character.
- '*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

Note:

- s could be empty and contains only lowercase letters a-z.
- p could be empty and contains only lowercase letters a-z, and characters like . or *.
Example 1:
#+BEGIN_SRC
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
#+END_SRC
Example 2:
#+BEGIN_SRC
Input:
s = "aa"
p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
#+END_SRC
Example 3:
#+BEGIN_SRC
Input:
s = "ab"
p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".
#+END_SRC
Example 4:
#+BEGIN_SRC
Input:
s = "aab"
p = "c*a*b"
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches "aab".
#+END_SRC
Example 5:
#+BEGIN_SRC
Input:
s = "mississippi"
p = "mis*is*p*."
Output: false
#+END_SRC

*** Solution
#+BEGIN_SRC c++
bool Solution::isMatch(string s, string p) {
  
  return
    p == "" ? s == "" :
    p.size() > 1 && p[1] == '*' ?
      isMatch(s, p.substr(2)) || 
        (s != "" && (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p)) :
    s != "" && 
      (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1), p.substr(1));
}

#+END_SRC

** DONE Wildcard Matching                                              :MEDI:

*** Description
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.
#+BEGIN_SRC
'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.
Example 1:

Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.
Example 4:

Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".
Example 5:

Input:
s = "acdcb"
p = "a*c?b"
Output: false
#+END_SRC

*** Solution
#+BEGIN_SRC C++
class Solution {
public:
  bool isMatch(string s, string p);
};

bool Solution::isMatch(string s, string p) {
  
  int m(s.size()), n(p.size());
  bool rc[m+1][n+1];
  
  for(int i(m); i >= 0; --i)
    for(int j(n); j >= 0; --j)
      
      rc[i][j] = 
        i == m && j == n      ? true                     :
        i == m && p[j] == '*' ? rc[i][j+1]               :
        i == m || j == n      ? false                    :
        p[j] == '.'           ? rc[i+1][j+1]             :
        p[j] == '*'           ? rc[i+1][j] || rc[i][j+1] :
        p[j] == s[i]          ? rc[i+1][j+1]             :
        /*otherwise          */ false                    ;
  
  return rc[0][0];
}

#+END_SRC

** TODO The Josephus Problem
** DONE Maximal Square                                                 :MEDI:
*** Description
Given a 2D binary matrix filled with 0's and 1's, 
find the largest square containing only 1's and return its area.

Example:
#+BEGIN_SRC 
Input: 

1 0 1 0 0
1 0 1 1 1
1 1 1 1 1
1 0 0 1 0

Output: 4
#+END_SRC

*** Solution
#+BEGIN_SRC c++

int Solution::maximalSquare(vector<vector<char>>& matrix) {
  
  if(matrix.empty()) return 0;
  int m = matrix.size(), n = matrix[0].size();
  int r[m][n], ma(0);
  
  for(int i(0); i < m; ++i) r[i][0] = matrix[i][0] - '0', ma = max(ma, r[i][0]);
  for(int j(0); j < n; ++j) r[0][j] = matrix[0][j] - '0', ma = max(ma, r[0][j]);
  
  for(int i(1); i < m; ++i) {
    for(int j(1); j < n; ++j) {
      
      r[i][j] = matrix[i][j] == '0' ? 0 :
        min(r[i-1][j], min(r[i][j-1], r[i-1][j-1])) + 1;
      ma = max(ma, r[i][j]);
    }
  }
  return ma * ma;
}
#+END_SRC

** NEXT Divisible Sum Pairs
#+BEGIN_SRC haskell

divisibleSumPairs n k ar = length $ 
  Data.List.filter (\(a, b) -> mod (a + b) k == 0) (list ar)

list ar = [(ar !! a, ar !! b) | a <- [0..n], b <- [a..n], a /= b] where
  n = length ar - 1
#+END_SRC
** NEXT [HackerRank] Interview Preparation Kit [7/8]
*** DONE Sock Merchant
#+BEGIN_SRC haskell
map' = Data.List.map
-- Complete the sockMerchant function below.
sockMerchant n ar = sum $ map' pair $ (group . sort) ar
  where pair xs = div (length xs) 2
#+END_SRC

*** DONE Counting Valleys
#+BEGIN_SRC haskell

countingValleys :: Int -> String -> Int
countingValleys n [] = 0
countingValleys n xs = count xs 0 0

count [] n vs = vs
count (c:cs) n vs = 
  if step c + n < 0 && n >= 0
  then count cs (step c + n) (vs + 1)
  else count cs (step c + n) vs

step :: Char -> Int
step c = case c of
  'U' -> 1
  'D' -> (-1)
  _   -> 0

#+END_SRC
*** DONE Jumping on the Clouds
#+BEGIN_SRC haskell

jumpingOnClouds :: [Int] -> Int
jumpingOnClouds []     = 0
jumpingOnClouds [x]    = 0
jumpingOnClouds [a, b] = 1
jumpingOnClouds (x:a:b:xs)
  | a == 1    = jumpingOnClouds (b:xs)   + 1
  | b == 1    = jumpingOnClouds (a:b:xs) + 1
  | otherwise = jumpingOnClouds (b:xs)   + 1
  
#+END_SRC
*** DONE Repeated String
#+BEGIN_SRC haskell

take' = Data.List.take
-- Complete the repeatedString function below.
repeatedString :: String -> Integer -> Int
repeatedString s n = 
  div (fromIntegral n) (fromIntegral $ length s) * countA s + 
  (countA . (take' (mod (fromIntegral n) $ fromIntegral (length s)))) s

countA "" = 0
countA (c:cs) = if c == 'a' then countA cs + 1 else countA cs

#+END_SRC
*** DONE 2D Array - DS
#+BEGIN_SRC haskell

map' = Data.List.map
-- Complete the hourglassSum function below.
hourglassSum :: [[Int]] -> Int
hourglassSum arr = maximum $ map' (mask arr) $ range ((1, 1), (a-2, b-2))
  where a = length arr
        b = length $ arr !! 0

mask :: [[Int]] -> (Int, Int) -> Int
mask [] _ = 0
mask m (x, y) = 
  m !! x !! y + 
  m !! (x-1) !! y + m !! (x-1) !! (y-1) + m !! (x-1) !! (y+1) +
  m !! (x+1) !! y + m !! (x+1) !! (y-1) + m !! (x+1) !! (y+1)

#+END_SRC
#+BEGIN_SRC haskell

hourglassSum :: [[Int]] -> [Int]
hourglassSum ((a1 : a2 : []) : _)  = []
hourglassSum (a:b:c:[]) = 
    (sum (take 3 a)) + (head $ tail b) + (sum (take 3 c)) :
    hourglassSum (tail a : tail b : tail c : [])

hGlassMap :: [[Int]] -> [Int]
hGlassMap (a : b : []) = []
hGlassMap (a : b : c : xs) = maximum (hourglassSum [a,b,c]) : hGlassMap (b:c: xs)
#+END_SRC
*** DONE Arrays: Left Rotation
#+BEGIN_SRC haskell

take' = Data.List.take
drop' = Data.List.drop
-- Complete the rotLeft function below.
rotLeft :: [Int] -> Int -> [Int]
rotLeft a d = rot a $ mod d (length a) where
  rot ar n = drop' n ar ++ take' n ar
#+END_SRC
*** DONE New Year Chaos
**** Description
[[https://www.hackerrank.com/challenges/new-year-chaos/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays][HackerRank]]
It's New Year's Day and everyone's in line for the Wonderland rollercoaster ride! 
There are a number of people queued up, and each person wears a sticker indicating their initial position in the queue. 
Initial positions increment by 1 from 1 at the front of the line to n at the back.

Any person in the queue can bribe the person directly in front of them to swap positions. 
If two people swap positions, they still wear the same sticker denoting their original places in line. 
One person can bribe at most two others. For example, if n = 8 and Person 5 bribes Person 4, 
the queue will look like this: [1 2 3 5 4 6 7 8].

Fascinated by this chaotic queue, 
you decide you must know the minimum number of bribes that took place to get the queue into its current state!

- Function Description

  Complete the function minimumBribes in the editor below. 
  It must print an integer representing the minimum number of bribes necessary, or Too chaotic 
  if the line configuration is not possible.

minimumBribes has the following parameter(s):

q: an array of integers
Input Format

The first line contains an integer t, the number of test cases.

Each of the next t pairs of lines are as follows:
- The first line contains an integer t, the number of people in the queue
- The second line has n space-separated integers describing the final state of the queue.

**** First submission
  #+BEGIN_SRC haskell

filter' = Data.List.filter
-- Complete the minimumBribes function below.
minimumBribes :: [Int] -> IO ()
minimumBribes q = do
  let ms = sum <$> sequence (count q [])
  putStrLn $ case ms of
    Just n  -> show n
    Nothing -> "Too chaotic"

count :: [Int] -> [Maybe Integer] -> [Maybe Integer]
count [] m = m
count (x:xs) m = count xs (inver x xs : m)

inver :: Int -> [Int] -> Maybe Integer
inver n [] = Just 0
inver n xs = if len <= 2 then Just len else Nothing
  where len = fromIntegral $ length $ filter' (< n) xs
  #+END_SRC

  + Result: Failed on some cases...
  + Analysis
    Use the constraint of 'at most 2 steps'.
**** Second submission
#+BEGIN_SRC haskell

import Control.Applicative ((<$>))
import Control.Monad (replicateM_, guard)
import Data.List (elemIndex)
import Data.Maybe (fromJust)

main :: IO ()
main = do
  t <- readLn :: IO Int
  replicateM_ t $ do
    n  <- readLn :: IO Int
    as <- reverse . map read . words <$> getLine :: IO [Int]
    case go n as of
      Just a  -> print a
      Nothing -> putStrLn "Too chaotic"

go :: Int -> [Int] -> Maybe Int
go 0 [] = Just 0
go n as = do
  i <- elemIndex n as
  guard (i <= 2)
  let (xs, y:ys) = splitAt i as
  let as' = xs ++ ys
  r <- go (n - 1) as'
  return $ r + i

#+END_SRC
**** Thinking
Thinking of the problem of inverse number.

*** NEXT Minimum Swaps 2
**** First submission
#+BEGIN_SRC haskell

minimumSwaps [] = 0
minimumSwaps ar = case swaps arr 0 (Just 0) of
  Just x  -> x
  Nothing -> 0
  where arr = listArray (0, length ar - 1) ar

swaps :: Array Int Int -> Int -> Maybe Int -> Maybe Int
swaps arr i n
  | i == length arr = n
  | otherwise       = 
    if arr ! i == i + 1 then swaps arr (i + 1) n 
    else do 
      j <- getIndex (i + 1) arr
      swaps (swapByIndex i j arr) (i + 1) $! ((1 +) <$> n)

getIndex x arr = fmap fst $ find ((== x) . snd) $ assocs arr

swapByIndex :: (Ix a) => a -> a -> Array a b -> Array a b
swapByIndex i j xs = xs // [(i, xs ! j), (j, xs ! i)]

#+END_SRC
+ Result: Time out on some cases...
**** Second submission

** DONE Decode the Morse code
#+BEGIN_SRC haskell

module Codewars.Kata.DecodeMorse (decodeMorse) where

import Codewars.Kata.DecodeMorse.Preload (morseCodes)

import Data.List.Split (splitOn)
import Data.Map.Strict ((!))

decodeMorse :: String -> String
decodeMorse = unwords . filter (not . null) . map (concatMap (morseCodes!) . words) . splitOn "   "
#+END_SRC
** DONE Shortest Knight Path
#+BEGIN_SRC haskell

import Data.Char

knight :: String -> String -> Int
knight s t = path [s] t 0

-- Brute BFS ...
path :: [String] -> String -> Int -> Int
path s t a = case filter (== t) s of
  [] -> path ((pos <$> s) >>= moves) t (a + 1)
  (x:xs) -> a
  where pos [c, i] = (c, read [i] :: Int)

moves :: (Char, Int) -> [String]
moves (c, n) = [chr c' : show n'
  | c' <- map ($ ord c) pos
  , n' <- map ($ n) pos
  , n' > 0 && n' < 9, c' >= ord 'a' && c' <= ord 'h'
  , abs (n' - n) /= abs (c' - ord c)
  ] where pos = [(+ 1), (+ 2), (\i -> i - 1), (\i -> i - 2)]
#+END_SRC


